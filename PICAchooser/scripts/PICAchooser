#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2020 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
# $Date: 2016/07/11 14:50:43 $
# $Id: tidepool,v 1.28 2016/07/11 14:50:43 frederic Exp $
#
# -*- coding: utf-8 -*-

"""
A simple GUI for rating timecoursese by whatever metric you want
"""

from __future__ import print_function, division

from pyqtgraph.Qt import QtGui, QtCore

import pyqtgraph as pg
import numpy as np

import sys
import os
import argparse
from scipy import fftpack
import PICAchooser.LightboxItem as lb
import PICAchooser.io as io
import PICAchooser.colormaps as cm


hammingwindows = {}


def is_valid_dir(parser, arg):
    """
    Check if argument is existing file.
    """
    if not os.path.isdir(arg) and arg is not None:
        parser.error('The directory {0} does not exist!'.format(arg))

    return arg


def is_valid_file(parser, arg):
    """
    Check if argument is existing file.
    """
    if not os.path.isfile(arg) and arg is not None:
        parser.error('The file {0} does not exist!'.format(arg))

    return arg


def invert_float(parser, arg):
    """
    Check if argument is float or auto.
    """
    if arg != 'auto':
        try:
            arg = float(arg)
        except parser.error:
            parser.error('Value {0} is not a float or "auto"'.format(arg))

    if arg != 'auto':
        arg = 1.0 / arg
    return arg


def is_float(parser, arg):
    """
    Check if argument is float or auto.
    """
    if arg != 'auto':
        try:
            arg = float(arg)
        except parser.error:
            parser.error('Value {0} is not a float or "auto"'.format(arg))

    return arg

def findICAfiles(featdir, melodicdir):
    icfile = os.path.join(melodicdir, 'melodic_IC.nii.gz')
    if not os.path.isfile(icfile):
        print('cannot find independent component file at', icfile)
        sys.exit()

    icmask = os.path.join(melodicdir, 'mask.nii.gz')
    if not os.path.isfile(icmask):
        print('cannot find independent component file at', icmask)
        sys.exit()

    bgfile = os.path.join(featdir, 'reg', 'example_func.nii.gz')
    if not os.path.isfile(bgfile):
        print('cannot find background image file at', bgfile)
        sys.exit()

    funcfile = os.path.join(featdir, 'filtered_func_data.nii.gz')
    if not os.path.isfile(funcfile):
        print('cannot find functional data file at', funcfile)
        sys.exit()

    tcfile = os.path.join(melodicdir, 'melodic_Tmodes')
    if not os.path.isfile(tcfile):
        print('cannot find AROMA timecourse file at', tcfile)
        sys.exit()

    motionfile = os.path.join(featdir, 'mc', 'prefiltered_func_data_mcf.par')
    if not os.path.isfile(motionfile):
        print('cannot find motion parameter file at', motionfile)
        sys.exit()

    return icfile, icmask, bgfile, funcfile, tcfile, motionfile


def hamming(length, debug=False):
    #   return 0.54 - 0.46 * np.cos((np.arange(0.0, float(length), 1.0) / float(length)) * 2.0 * np.pi)
    r"""Returns a Hamming window function of the specified length.  Once calculated, windows
    are cached for speed.

    Parameters
    ----------
    length : int
        The length of the window function
        :param length:

    debug : boolean, optional
        When True, internal states of the function will be printed to help debugging.
        :param debug:

    Returns
    -------
    windowfunc : 1D float array
        The window function
    """
    try:
        return hammingwindows[str(length)]
    except KeyError:
        hammingwindows[str(length)] = 0.54 - 0.46 * np.cos(
            (np.arange(0.0, float(length), 1.0) / float(length)) * 2.0 * np.pi)
        if debug:
            print('initialized hamming window for length', length)
        return hammingwindows[str(length)]


def spectrum(inputdata, Fs=1.0, mode='power', trim=True):
    r"""Performs an FFT of the input data, and returns the frequency axis and spectrum
    of the input signal.

    Parameters
    ----------
    inputdata : 1D numpy array
        Input data
        :param inputdata:

    Fs : float, optional
        Sample rate in Hz.  Defaults to 1.0
        :param Fs:

    mode : {'real', 'imag', 'mag', 'phase', 'power'}, optional
        The type of spectrum to return.  Default is 'power'.
        :param mode:

    trim: bool
        If True (default) return only the positive frequency values

    Returns
    -------
    specaxis : 1D float array
        The frequency axis.

    specvals : 1D float array
        The spectral data.

    Other Parameters
    ----------------
    Fs : float
        Sample rate in Hz.  Defaults to 1.0
        :param Fs:

    mode : {'real', 'imag', 'complex', 'mag', 'phase', 'power'}
        The type of spectrum to return.  Legal values are 'real', 'imag', 'mag', 'phase', and 'power' (default)
        :param mode:
    """
    if trim:
        specvals = fftpack.fft(inputdata)[0:len(inputdata) // 2]
        maxfreq = Fs / 2.0
        specaxis = np.linspace(0.0, maxfreq, len(specvals), endpoint=False)
    else:
        specvals = fftpack.fft(inputdata)
        maxfreq = Fs
        specaxis = np.linspace(0.0, maxfreq, len(specvals), endpoint=False)
    if mode == 'real':
        specvals = specvals.real
    elif mode == 'imag':
        specvals = specvals.imag
    elif mode == 'complex':
        pass
    elif mode == 'mag':
        specvals = np.absolute(specvals)
    elif mode == 'phase':
        specvals = np.angle(specvals)
    elif mode == 'power':
        specvals = np.sqrt(np.absolute(specvals))
    else:
        print('illegal spectrum mode')
        specvals = None
    return specaxis, specvals


class KeyPressWindow(QtGui.QMainWindow):
    sigKeyPress = QtCore.pyqtSignal(object)
    sigResize = QtCore.pyqtSignal(object)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def closeEvent(self, event):
        writegrades()

    def keyPressEvent(self, ev):
        self.sigKeyPress.emit(ev)

    def resizeEvent(self, ev):
        self.sigResize.emit(ev)


def incrementgrade(whichcomponent):
    global alldata, namelist

    alldata[namelist[whichcomponent]]['grade'] *= -1


def decrementgrade(whichcomponent):
    global alldata, namelist

    alldata[namelist[whichcomponent]]['grade'] *= -1


def writegrades():
    global alldata, namelist, numelements, outputfile, runmode

    badlist = []
    for i in range(len(namelist)):
        if alldata[namelist[i]]['grade'] < 0:
            badlist.append(str(i + 1))
    outputstring = ','.join(badlist)
    if runmode == 'fix':
        outputstring = '[' + outputstring + ']'
    with open(outputfile, 'w') as thefile:
            thefile.write(outputstring + '\n')


def windowResized(evt):
    global mainwin

    print('handling window resize')
    if mainwin is not None:
        updateLightbox()


def keyPressed(evt):
    global whichcomponent, numelements, mainwin, verbose

    if verbose:
        print('processing keypress event')

    if evt.key() == QtCore.Qt.Key_Up:
        incrementgrade(whichcomponent)
    elif evt.key() == QtCore.Qt.Key_Down:
        decrementgrade(whichcomponent)
    elif evt.key() == QtCore.Qt.Key_Left:
        whichcomponent = (whichcomponent - 1) % numelements
        print('IC set to:', whichcomponent + 1)
    elif evt.key() == QtCore.Qt.Key_Right:
        whichcomponent = (whichcomponent + 1) % numelements
        print('IC set to:', whichcomponent + 1)
    elif evt.key() == QtCore.Qt.Key_Escape:
        writegrades()
        print('done')
    else:
        print(evt.key())

    updateTimecourse()
    updateMotion()
    if mainwin is not None:
        updateLightbox()


def updateTimecourse():
    global timecourse_ax, spectrum_ax, whichcomponent, alldata, namelist, win, numelements, verbose

    if verbose:
        print('entering updateTimecourse')
    thiscomponent = alldata[namelist[whichcomponent]]
    windowtitle = 'PICAchooser - Component {0} of {1}'.format(whichcomponent + 1, numelements)
    if thiscomponent['grade'] is None:
        pencolor = 'w'
    elif thiscomponent['grade'] == 0:
        pencolor = 'w'
    elif thiscomponent['grade'] > 0:
        pencolor = 'g'
    else:
        pencolor = 'r'
        windowtitle = windowtitle + ' - marked for removal'
    win.setWindowTitle(windowtitle)

    timecourse_ax.plot(thiscomponent['timeaxis'], thiscomponent['timecourse'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen(pencolor, width=1), clear=True)

    spectrum_ax.plot(thiscomponent['freqaxis'], thiscomponent['spectrum'],
                     stepMode=False,
                     fillLevel=0,
                     pen=pg.mkPen(pencolor, width=1),
                     clear=True)

    spectop = 1.25 * np.max(thiscomponent['spectrum'])
    spectrum_ax.setYRange(0.0, spectop, padding=0)


def updateMotion():
    global transmot_ax, rotmot_ax, whichcomponent, alldata, motion, namelist, win, numelements, verbose

    if verbose:
        print('entering updateMotion')
    thiscomponent = alldata[namelist[whichcomponent]]
    curve1 = transmot_ax.plot()
    curve1.setData(thiscomponent['timeaxis'], motion['xtrans'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('FF8888', width=1), clear=True, name='xtrans')
    curve2 = transmot_ax.plot()
    curve2.setData(thiscomponent['timeaxis'], motion['ytrans'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('88FF88', width=1), clear=True, name='ytrans')
    curve3 = transmot_ax.plot()
    curve3.setData(thiscomponent['timeaxis'], motion['ztrans'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('8888FF', width=1), clear=True, name='ztrans')
    transmot_ax.addLegend(offset=(0.75 * motion['maxtime'], 0.75 * motion['maxtrans']))

    curve4 = rotmot_ax.plot()
    curve4.setData(thiscomponent['timeaxis'], motion['xrot'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('FF8888', width=1), clear=True, name='xrot')
    curve5 = rotmot_ax.plot()
    curve5.setData(thiscomponent['timeaxis'], motion['yrot'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('88FF88', width=1), clear=True, name='yrot')
    curve6 = rotmot_ax.plot()
    curve6.setData(thiscomponent['timeaxis'], motion['zrot'],
                      stepMode=False, fillLevel=0, pen=pg.mkPen('8888FF', width=1), clear=True, name='ztrans')
    rotmot_ax.addLegend(offset=(0.75 * motion['maxtime'], 0.75 * motion['maxrot']))


def updateLightbox():
    global mainwin, whichcomponent, verbose, alldata, namelist

    if verbose:
        print('entering updateLightbox')
    thiscomponent = alldata[namelist[whichcomponent]]
    if thiscomponent['grade'] == 1:
        thelabel = 'Keeping IC {0}'.format(whichcomponent + 1)
        thecolor = 'g'
    else:
        thelabel = 'Discarding IC {0}'.format(whichcomponent + 1)
        thecolor = 'r'
    mainwin.setLabel(thelabel, thecolor)
    mainwin.setTpos(whichcomponent)

def main():
    global ui, win, mainwin
    global namelist, outputfile, alldata, motion, whichcomponent, numelements, runmode
    global mainwin, verbose

    mainwin = None
    verbose = False

    parser = argparse.ArgumentParser(description='A program to review (and alter) melodic component selections.')
    parser.add_argument(
        'featdir',
        type=lambda x: is_valid_dir(parser, x),
        help='The FEAT directory associated with this MELODIC run.',
        default=None)

    runtype = parser.add_mutually_exclusive_group()
    runtype.add_argument(
        '--melodicdir',
        type=lambda x: is_valid_dir(parser, x),
        help='The location of the MELODIC directory to classified.',
        default=None)
    runtype.add_argument(
        '--aromadir',
        type=lambda x: is_valid_dir(parser, x),
        help='The location of the AROMA directory.',
        default=None)
    runtype.add_argument(
        '--fixmelodicdir',
        type=lambda x: is_valid_dir(parser, x),
        help='The location of the MELODIC directory to be used for FIX.',
        default=None)

    parser.add_argument(
        '--outputfile',
        type=str,
        help='The name of the new component file (if not specified, it will be put in the appropriate directory with a stadard name).',
        default=None)
    parser.add_argument(
        '--displaythresh',
        type=lambda x: is_float(parser, x),
        help='z threshold for the displayed ICA components.  Default is 2.3.',
        default=2.3)

    args = parser.parse_args()

    if args.aromadir is not None:
        runmode = 'aroma'
    elif args.melodicdir is not None:
        runmode = 'melodic'
    elif args.fixmelodicdir is not None:
        runmode = 'fix'
    else:
        print('cannot determine run mode - exiting')
        sys.exit()

    # there are 3 modes at the moment - melodic, aroma, and fix
    # if the mode is melodic, load ICA and feat files, and create a remove file with the 1,2,3... format named $MELODICDIR/'badcomponents.txt'
    # if the mode is aroma, load ICA feat, and existing remove files, and create a new remove file with the 1,2,3... format named $AROMADIR/classified_motion_ICs_revised.txt
    # if the mode is fix, load ICA feat, and existing remove files, and create a new remove file with the [1,2,3...] format named $FEATDIR/hand_labels_noise.txt
    initfileexists = False
    if runmode == 'melodic':
        melodicdir = args.melodicdir
        Removefile = os.path.join(args.melodicdir, 'badcomponents.txt')
        if not os.path.isfile(Removefile):
            print('cannot find existing removed component file at', Removefile, '- will create new one')
            if args.outputfile is None:
                outputfile = Removefile.replace('.txt', '_revised.txt')
            else:
                outputfile = args.outputfile
            initfileexists = False
        else:
            print('will create new removed component file at', Removefile)
            if args.outputfile is None:
                outputfile = Removefile
            else:
                outputfile = args.outputfile
            print('will create new removed component file at', outputfile)
            initfileexists = True
    elif runmode == 'aroma':
        melodicdir = os.path.join(args.aromadir, 'melodic.ica')
        Removefile = os.path.join(args.aromadir, 'classified_motion_ICs.txt')
        if not os.path.isfile(Removefile):
            print('cannot find removed component file at', Removefile)
            sys.exit()
        if args.outputfile is None:
            outputfile = Removefile.replace('.txt', '_revised.txt')
        else:
            outputfile = args.outputfile
        initfileexists = True
    elif runmode == 'fix':
        melodicdir = args.fixmelodicdir
        Removefile = os.path.join(args.fixmelodicdir, 'hand_labels_noise.txt')
        if not os.path.isfile(Removefile):
            print('cannot find existing removed component file at', Removefile, '- will create new one')
            if args.outputfile is None:
                outputfile = Removefile.replace('.txt', '_revised.txt')
            else:
                outputfile = args.outputfile
            initfileexists = False
        else:
            print('will create new removed component file at', Removefile)
            if args.outputfile is None:
                outputfile = Removefile
            else:
                outputfile = args.outputfile
            print('will create new removed component file at', outputfile)
            initfileexists = True
    else:
        print('illegal runmode', runmode, '- exiting')
        sys.exit()

    ICfile, ICmask, BGfile, Funcfile, TCfile, Motionfile = findICAfiles(args.featdir, melodicdir)

    if verbose:
        print(ICfile)
        print(ICmask)
        print(BGfile)
        print(Funcfile)
        print(TCfile)
        print(Motionfile)
        print(Removefile)

    # set the sample rate
    tr, timepoints = io.fmritimeinfo(Funcfile)
    samplerate = 1.0 / tr

    # read in the timecourses and their current labels
    alldata = {}
    numelements = 0
    alltcs = io.readvecs(TCfile)
    numelements = alltcs.shape[0]
    grades = np.ones(numelements, dtype=np.int)
    if initfileexists:
        print('reading initfile...')
        with open(Removefile, 'r') as thefile:
            inline = thefile.readline().replace('[','').replace(']','')
        inlist = inline.split(',')
        for component in inlist:
            grades[int(component) - 1] = -1
    else:
        grades = None

    # read in the motion timecourses
    print('reading motion timecourses...')
    allmotion = io.readvecs(Motionfile)
    motion = {}
    motion['xtrans'] = allmotion[3, :] * 1.0
    motion['ytrans'] = allmotion[4, :] * 1.0
    motion['ztrans'] = allmotion[5, :] * 1.0
    motion['maxtrans'] = np.max([np.max(motion['xtrans']), np.max(motion['ytrans']), np.max(motion['ztrans'])])
    motion['mintrans'] = np.min([np.min(motion['xtrans']), np.min(motion['ytrans']), np.min(motion['ztrans'])])
    motion['xrot'] = allmotion[0, :] * 1.0
    motion['yrot'] = allmotion[1, :] * 1.0
    motion['zrot'] = allmotion[2, :] * 1.0
    motion['maxrot'] = np.max([np.max(motion['xrot']), np.max(motion['yrot']), np.max(motion['zrot'])])
    motion['minrot'] = np.min([np.min(motion['xrot']), np.min(motion['yrot']), np.min(motion['zrot'])])

    namelist = []
    print('reading timecourses...')
    for idx in range(numelements):
        thefile = str(idx + 1)
        namelist.append(thefile)
        if grades is not None:
            thegrade = grades[idx]
        else:
            thegrade = 1
        thesamplerate = samplerate
        alldata[thefile] = {}
        invec = alltcs[idx, :]
        alldata[thefile]['timecourse'] = invec * 1.0
        alldata[thefile]['timeaxis'] = np.linspace(0.0, 1.0 * (len(invec) - 1), num=len(invec), endpoint=True) / thesamplerate
        alldata[thefile]['freqaxis'], alldata[thefile]['spectrum'] = \
            spectrum(hamming(len(invec)) * invec, Fs=thesamplerate, mode='mag')
        alldata[thefile]['grade'] = thegrade
        alldata[thefile]['samplerate'] = thesamplerate
        if verbose:
            print(thefile, thegrade, thesamplerate)
    print('Read in', numelements, 'files')
    motion['maxtime'] = alldata['1']['timeaxis'][-1] + 0.0
    whichcomponent = 0

    # make the main window
    import PICAchooser.PICAchooserTemplate as uiTemplate

    app = QtGui.QApplication([])
    print("setting up output window")
    #win = QtGui.QMainWindow()
    win = KeyPressWindow()
    win.sigKeyPress.connect(keyPressed)
    win.sigResize.connect(windowResized)

    ui = uiTemplate.Ui_MainWindow()
    ui.setupUi(win)
    win.show()
    win.setWindowTitle("PICAchooser")

    # set up the regressor timecourse window
    print('about to set up the timecourse')
    global timecourse_ax
    timecoursewin = ui.timecourse_graphicsView
    timecourse_ax = timecoursewin.addPlot(title='Independent component', labels={'left': 'Intensity (a.u.)', 'bottom': 'Time (s)'})

    # set up the regressor spectrum window
    print('about to set up the spectrum')
    global spectrum_ax
    spectrumwin = ui.spectrum_graphicsView
    spectrum_ax = spectrumwin.addPlot(title='Power spectrum of timecourse', labels={'left': 'Power (a.u.)', 'bottom': 'Frequency (Hz)'})

    global transmot_ax, rotmot_ax
    # set up the translational motion window
    print('about to set up the translational motion')
    transmotwin = ui.translation_graphicsView
    transmot_ax = transmotwin.addPlot(title='Temporal mode', labels={'left': 'Displacement (mm)', 'bottom': 'Time (s)'})

    # set up the translational motion window
    print('about to set up the translational motion')
    rotmotwin = ui.rotation_graphicsView
    rotmot_ax = rotmotwin.addPlot(title='Rotation timecourses', labels = {'left': 'Rotation (radians)', 'bottom': 'Time (s)'})


    print('setting up image window')
    geommaskimage = lb.imagedataset('ICmask', ICmask, 'ICmask', lut_state=cm.mask_state)
    fgimage = lb.imagedataset('IC', ICfile, 'IC', lut_state=cm.redyellow_state, geommask=geommaskimage.data)
    fgimage.setFuncMaskByThresh(threshval=args.displaythresh)
    bgimage = lb.imagedataset('BG', BGfile, 'background', lut_state=cm.gray_state)
    mainwin = lb.LightboxItem(fgimage, ui.image_graphicsView, bgmap=bgimage)

    # initialize everything
    updateTimecourse()
    updateMotion()
    updateLightbox()

    QtGui.QApplication.instance().exec_()


if __name__ == "__main__":
    main()
